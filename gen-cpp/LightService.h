/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LightService_H
#define LightService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "light_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LightServiceIf {
 public:
  virtual ~LightServiceIf() {}
  virtual void ping() = 0;
  virtual void add(const AddArgs& addArgs) = 0;
  virtual void get(std::string& _return, const std::string& key) = 0;
};

class LightServiceIfFactory {
 public:
  typedef LightServiceIf Handler;

  virtual ~LightServiceIfFactory() {}

  virtual LightServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LightServiceIf* /* handler */) = 0;
};

class LightServiceIfSingletonFactory : virtual public LightServiceIfFactory {
 public:
  LightServiceIfSingletonFactory(const boost::shared_ptr<LightServiceIf>& iface) : iface_(iface) {}
  virtual ~LightServiceIfSingletonFactory() {}

  virtual LightServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LightServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<LightServiceIf> iface_;
};

class LightServiceNull : virtual public LightServiceIf {
 public:
  virtual ~LightServiceNull() {}
  void ping() {
    return;
  }
  void add(const AddArgs& /* addArgs */) {
    return;
  }
  void get(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
};


class LightService_ping_args {
 public:

  LightService_ping_args(const LightService_ping_args&);
  LightService_ping_args& operator=(const LightService_ping_args&);
  LightService_ping_args() {
  }

  virtual ~LightService_ping_args() throw();

  bool operator == (const LightService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LightService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LightService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LightService_ping_args& obj);

};


class LightService_ping_pargs {
 public:


  virtual ~LightService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LightService_ping_pargs& obj);

};


class LightService_ping_result {
 public:

  LightService_ping_result(const LightService_ping_result&);
  LightService_ping_result& operator=(const LightService_ping_result&);
  LightService_ping_result() {
  }

  virtual ~LightService_ping_result() throw();

  bool operator == (const LightService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LightService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LightService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LightService_ping_result& obj);

};


class LightService_ping_presult {
 public:


  virtual ~LightService_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const LightService_ping_presult& obj);

};

typedef struct _LightService_add_args__isset {
  _LightService_add_args__isset() : addArgs(false) {}
  bool addArgs :1;
} _LightService_add_args__isset;

class LightService_add_args {
 public:

  LightService_add_args(const LightService_add_args&);
  LightService_add_args& operator=(const LightService_add_args&);
  LightService_add_args() {
  }

  virtual ~LightService_add_args() throw();
  AddArgs addArgs;

  _LightService_add_args__isset __isset;

  void __set_addArgs(const AddArgs& val);

  bool operator == (const LightService_add_args & rhs) const
  {
    if (!(addArgs == rhs.addArgs))
      return false;
    return true;
  }
  bool operator != (const LightService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LightService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LightService_add_args& obj);

};


class LightService_add_pargs {
 public:


  virtual ~LightService_add_pargs() throw();
  const AddArgs* addArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LightService_add_pargs& obj);

};

typedef struct _LightService_add_result__isset {
  _LightService_add_result__isset() : e(false) {}
  bool e :1;
} _LightService_add_result__isset;

class LightService_add_result {
 public:

  LightService_add_result(const LightService_add_result&);
  LightService_add_result& operator=(const LightService_add_result&);
  LightService_add_result() {
  }

  virtual ~LightService_add_result() throw();
  InvalidArgsException e;

  _LightService_add_result__isset __isset;

  void __set_e(const InvalidArgsException& val);

  bool operator == (const LightService_add_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const LightService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LightService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LightService_add_result& obj);

};

typedef struct _LightService_add_presult__isset {
  _LightService_add_presult__isset() : e(false) {}
  bool e :1;
} _LightService_add_presult__isset;

class LightService_add_presult {
 public:


  virtual ~LightService_add_presult() throw();
  InvalidArgsException e;

  _LightService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const LightService_add_presult& obj);

};

typedef struct _LightService_get_args__isset {
  _LightService_get_args__isset() : key(false) {}
  bool key :1;
} _LightService_get_args__isset;

class LightService_get_args {
 public:

  LightService_get_args(const LightService_get_args&);
  LightService_get_args& operator=(const LightService_get_args&);
  LightService_get_args() : key() {
  }

  virtual ~LightService_get_args() throw();
  std::string key;

  _LightService_get_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const LightService_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const LightService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LightService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LightService_get_args& obj);

};


class LightService_get_pargs {
 public:


  virtual ~LightService_get_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LightService_get_pargs& obj);

};

typedef struct _LightService_get_result__isset {
  _LightService_get_result__isset() : success(false) {}
  bool success :1;
} _LightService_get_result__isset;

class LightService_get_result {
 public:

  LightService_get_result(const LightService_get_result&);
  LightService_get_result& operator=(const LightService_get_result&);
  LightService_get_result() : success() {
  }

  virtual ~LightService_get_result() throw();
  std::string success;

  _LightService_get_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const LightService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LightService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LightService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LightService_get_result& obj);

};

typedef struct _LightService_get_presult__isset {
  _LightService_get_presult__isset() : success(false) {}
  bool success :1;
} _LightService_get_presult__isset;

class LightService_get_presult {
 public:


  virtual ~LightService_get_presult() throw();
  std::string* success;

  _LightService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const LightService_get_presult& obj);

};

class LightServiceClient : virtual public LightServiceIf {
 public:
  LightServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LightServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void add(const AddArgs& addArgs);
  void send_add(const AddArgs& addArgs);
  void recv_add();
  void get(std::string& _return, const std::string& key);
  void send_get(const std::string& key);
  void recv_get(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LightServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LightServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LightServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LightServiceProcessor(boost::shared_ptr<LightServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &LightServiceProcessor::process_ping;
    processMap_["add"] = &LightServiceProcessor::process_add;
    processMap_["get"] = &LightServiceProcessor::process_get;
  }

  virtual ~LightServiceProcessor() {}
};

class LightServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LightServiceProcessorFactory(const ::boost::shared_ptr< LightServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LightServiceIfFactory > handlerFactory_;
};

class LightServiceMultiface : virtual public LightServiceIf {
 public:
  LightServiceMultiface(std::vector<boost::shared_ptr<LightServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LightServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LightServiceIf> > ifaces_;
  LightServiceMultiface() {}
  void add(boost::shared_ptr<LightServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void add(const AddArgs& addArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(addArgs);
    }
    ifaces_[i]->add(addArgs);
  }

  void get(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key);
    }
    ifaces_[i]->get(_return, key);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LightServiceConcurrentClient : virtual public LightServiceIf {
 public:
  LightServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LightServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void add(const AddArgs& addArgs);
  int32_t send_add(const AddArgs& addArgs);
  void recv_add(const int32_t seqid);
  void get(std::string& _return, const std::string& key);
  int32_t send_get(const std::string& key);
  void recv_get(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
