/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef light_TYPES_H
#define light_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class AddArgs;

class InvalidArgsException;

typedef struct _AddArgs__isset {
  _AddArgs__isset() : ttl(true) {}
  bool ttl :1;
} _AddArgs__isset;

class AddArgs {
 public:

  AddArgs(const AddArgs&);
  AddArgs& operator=(const AddArgs&);
  AddArgs() : key(), value(), ttl(30LL) {
  }

  virtual ~AddArgs() throw();
  std::string key;
  std::string value;
  int64_t ttl;

  _AddArgs__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_ttl(const int64_t val);

  bool operator == (const AddArgs & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.ttl != rhs.__isset.ttl)
      return false;
    else if (__isset.ttl && !(ttl == rhs.ttl))
      return false;
    return true;
  }
  bool operator != (const AddArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddArgs& obj);

};

void swap(AddArgs &a, AddArgs &b);

typedef struct _InvalidArgsException__isset {
  _InvalidArgsException__isset() : errorCode(false), message(false) {}
  bool errorCode :1;
  bool message :1;
} _InvalidArgsException__isset;

class InvalidArgsException : public ::apache::thrift::TException {
 public:

  InvalidArgsException(const InvalidArgsException&);
  InvalidArgsException& operator=(const InvalidArgsException&);
  InvalidArgsException() : errorCode(0), message() {
  }

  virtual ~InvalidArgsException() throw();
  int64_t errorCode;
  std::string message;

  _InvalidArgsException__isset __isset;

  void __set_errorCode(const int64_t val);

  void __set_message(const std::string& val);

  bool operator == (const InvalidArgsException & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const InvalidArgsException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidArgsException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidArgsException& obj);

  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidArgsException &a, InvalidArgsException &b);



#endif
